#pragma once

#include <QtEntity/PooledEntitySystem>
#include <QtEntity/DataTypes>
#include <osg/Group>
#include <osg/Shape>
#include <osg/ShapeDrawable>
#include <osg/Geode>
#include <osg/PositionAttitudeTransform>
#include <QColor>

class ActorSystem;

class Actor : public QtEntity::Component
{
    friend class ActorSystem;    
    DECLARE_COMPONENT_TYPE(NOEXP)

public:

    Actor();


    /**
     * Set entity name (human readable identifier)
     * Causes MetaDataSystem to emit entityChanged signal
     **/
    void setName(const QString& name);

    /**
     * Get entity name (human readable identifier)
     **/
    QString name() const  { return _name; }

    void setPosition(const osg::Vec3d& p);
    osg::Vec3d position() const;

    void setShapes(const QVariantList& v);
    QVariantList shapes() const  { return _shapes; }

private:

    QtEntity::EntityId _id;
    QString _name;
    osg::ref_ptr<osg::Geode> _geode;
    osg::ref_ptr<osg::PositionAttitudeTransform> _transform;
    ActorSystem* _system;
    QVariantList _shapes;
};


class ActorSystem 
    : public QtEntity::PooledEntitySystem<Actor>
{
    Q_OBJECT
    typedef QtEntity::PooledEntitySystem<Actor> BaseClass;
public:

    ActorSystem(QtEntity::EntityManager* em, osg::Group* rootnode);

    // override to emit signal for creating entity list entry
    virtual QtEntity::Component* createComponent(QtEntity::EntityId id, const QVariantMap& propertyVals = QVariantMap()) override;

    // override to emit signal for removing entity list entry
    virtual bool destroyComponent(QtEntity::EntityId id) override;

    virtual QVariantMap toVariantMap(QtEntity::EntityId eid, int context = 0) override;
    virtual void fromVariantMap(QtEntity::EntityId eid, const QVariantMap& m, int context = 0) override;
    virtual QVariantMap editingAttributes(int context = 0) const override;

signals:

    void entityAdded(QtEntity::EntityId id, QString name);
    void entityRemoved(QtEntity::EntityId id);
    void entityChanged(QtEntity::EntityId id, QString name);
  
private:
    osg::ref_ptr<osg::Group> _rootNode;
};
