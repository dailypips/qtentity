#pragma once

#include <QtEntity/EntityManager>
#include <QtEntityUtils/PrefabSystem>
#include <QObject>
#include <QTimer>
#include <QKeyEvent>

class AttackSystem;
class ParticleEmitterSystem;
class Renderer;
class ShapeSystem;


class Game : public QObject
{

    Q_OBJECT

public:

    Game(Renderer*);

    QtEntity::EntityManager* entityManager() { return &_entityManager; }

    void keyPressEvent ( QKeyEvent * event );
    void keyReleaseEvent ( QKeyEvent * event );

    enum KeyBit
    {
        UP_PRESSED    = 1 << 0,
        DOWN_PRESSED  = 1 << 1,
        LEFT_PRESSED  = 1 << 2,
        RIGHT_PRESSED = 1 << 3,
        SPACE_PRESSED = 1 << 4
    };

    QtEntity::EntityId createPrefabInstance(const QString& name);

    QtEntityUtils::PrefabSystem* prefabSystem() const { return _prefabsys; }
    ShapeSystem* shapeSystem() const { return _shapesys; }

public slots:

    void init();
    void run();
    void end();
    void step(int frameNumber, int totalTime, float delta);

private:

    void createPlayer();

    unsigned int _keyBits;

    Renderer* _renderer;
    QtEntity::EntityManager _entityManager;
    bool _isRunning;

    AttackSystem* _attacksys;
    ParticleEmitterSystem* _particleSystem;
    QtEntityUtils::PrefabSystem* _prefabsys;
    ShapeSystem* _shapesys;

    QtEntity::EntityId _playerid;
};



