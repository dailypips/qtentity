#pragma once

#include <QtEntity/PooledEntitySystem>
#include <QtEntityUtils/VariantManager>

#include <QRect>
#include "Renderer"

class ShapeSystem;

class Shape : public QtEntity::Component
{
    DECLARE_COMPONENT_TYPE(NOEXP)    
    
    friend class ShapeSystem;

public:

    Shape();

    void setPosition(const QPoint& p);
    QPoint position() const { return _position; }

    void setPath(const QtEntityUtils::FilePath& path)
    {
        _path = path;
        buildShape();
    }
    QtEntityUtils::FilePath path() const {
        return _path;
    }

    void setZIndex(int i);
    int zIndex() const { return _zindex; }

    void setSubtex(const QRect& v) { _subtex = v; buildShape(); }
    QRect subTex() const { return _subtex; }

private:

    void buildShape();
    Renderer* _renderer;
    QtEntityUtils::FilePath _path;
    QPoint _position;
    QRect _subtex;
    int _zindex;
    RenderHandle _handle;
};


class ShapeSystem : public QtEntity::PooledEntitySystem<Shape>
{   

public:
    typedef QtEntity::PooledEntitySystem<Shape> BaseClass;
    ShapeSystem(QtEntity::EntityManager* em, Renderer* renderer);

    virtual QtEntity::Component* createComponent(QtEntity::EntityId id, const QVariantMap& propertyVals = QVariantMap()) override;
        
    virtual QVariantMap propertyValues(QtEntity::EntityId eid) override;
    virtual QVariantMap propertyAttributes() override;
    virtual void applyPropertyValues(QtEntity::EntityId eid, const QVariantMap& m) override;

private:
    Renderer* _renderer;
};
