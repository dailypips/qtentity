#pragma once

#include <QtEntity/PooledEntitySystem>
#include <QtEntityUtils/VariantManager>

#include <QRect>
#include "Renderer"

class ShapeSystem;

class Shape : public QtEntity::Component
{
    DECLARE_COMPONENT_TYPE(NOEXP)    
    
    friend class ShapeSystem;
    friend class Renderer;

public:

    Shape();

private:

    QtEntityUtils::FilePath _path;
    QPoint _position;
    QRect _subtex;
    int _zindex;
    int _rotation;
    QObject* _handle;
};


class ShapeSystem : public QtEntity::PooledEntitySystem<Shape>
{   

public:
    typedef QtEntity::PooledEntitySystem<Shape> BaseClass;
    ShapeSystem(QtEntity::EntityManager* em, Renderer* renderer);

    virtual QtEntity::Component* createComponent(QtEntity::EntityId id, const QVariantMap& propertyVals = QVariantMap()) override;
    virtual bool destroyComponent(QtEntity::EntityId id);
    virtual QVariantMap toVariantMap(QtEntity::EntityId eid, int context = 0) override;
    virtual QVariantMap editingAttributes(int context = 0) const override;
    virtual void fromVariantMap(QtEntity::EntityId eid, const QVariantMap& m, int context = 0) override;

    void setPosition(QtEntity::EntityId eid, const QPoint& p);
    QPoint position(QtEntity::EntityId eid) const;

    void setPath(QtEntity::EntityId eid, const QtEntityUtils::FilePath& path);
    QtEntityUtils::FilePath path(QtEntity::EntityId eid) const;

    void setZIndex(QtEntity::EntityId eid, int i);
    int zIndex(QtEntity::EntityId eid) const;

    void setSubtex(QtEntity::EntityId eid, const QRect& v);
    QRect subTex(QtEntity::EntityId eid) const;

    void setRotation(QtEntity::EntityId eid, int i);
    int rotation(QtEntity::EntityId eid) const;

private:
    Renderer* _renderer;
};
