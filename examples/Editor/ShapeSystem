#pragma once

#include <QtEntity/EntitySystem>
#include <QRect>
#include "Renderer"

class Shape : public QObject
{
    Q_OBJECT

    Q_PROPERTY(QPoint position READ position WRITE setPosition USER true)
    Q_PROPERTY(QString path READ path WRITE setPath USER true)
    Q_PROPERTY(int zIndex READ zIndex WRITE setZIndex USER true)
    Q_PROPERTY(QRect subTex READ subTex WRITE setSubtex USER true)

public:

    Shape(Renderer* renderer, const QPoint& pos, const QString& path, int zIndex, const QRect& subtex);

    void setPosition(const QPoint& p) { _position = p; }
    QPoint position() const { return _position; }

    void setPath(const QString& path) { _path = path; buildShape();}
    QString path() const { return _path; }

    void setZIndex(int i) { _zindex = i; buildShape(); }
    int zIndex() const { return _zindex; }

    void setSubtex(const QRect& v) { _subtex = v; buildShape(); }
    QRect subTex() const { return _subtex; }

private:

    void buildShape();
    Renderer* _renderer;
    QString _path;
    QPoint _position;
    QRect _subtex;
    int _zindex;
    RenderHandle _handle;
};


class ShapeSystem : public QtEntity::EntitySystem
{
    Q_OBJECT

public:
    ShapeSystem(Renderer* renderer);

protected:
    // override to call ListEntry constructor passing it pointer to this
    virtual QObject* createObjectInstance(QtEntity::EntityId id, const QVariantMap& propertyVals) override;

private:
    Renderer* _renderer;
};
