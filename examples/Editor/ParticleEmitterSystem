#pragma once

#include <QtEntity/PooledEntitySystem>
#include <QtEntityUtils/ItemList>

class ParticleEmitter
{

    friend class ParticleEmitterSystem;

public:

    ParticleEmitter();

private:
    QtEntityUtils::ItemList _emitters;

};

Q_DECLARE_METATYPE(ParticleEmitter)

class Renderer;

class ParticleEmitterSystem : public QtEntity::PooledEntitySystem<ParticleEmitter>
{   
    Q_OBJECT

public:
    typedef QtEntity::PooledEntitySystem<ParticleEmitter> BaseClass;

    ParticleEmitterSystem(QtEntity::EntityManager* em, Renderer* renderer);

    virtual QVariantMap toVariantMap(QtEntity::EntityId eid, int context = 0) override;
    virtual QVariantMap editingAttributes(int context = 0) const override;
    virtual void fromVariantMap(QtEntity::EntityId eid, const QVariantMap& m, int context = 0) override;

    void setEmitters(QtEntity::EntityId id, const QtEntityUtils::ItemList& emitters);

private:

    Renderer* _renderer;
};
