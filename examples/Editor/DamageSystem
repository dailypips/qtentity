#pragma once

#include <QtEntity/PooledEntitySystem>

class Damage : public QtEntity::Component
{
    DECLARE_COMPONENT_TYPE(NOEXP)    

public:

    Damage() : _energy(0) { }

    void setEnergy(int v) { _energy = v; }
    int energy() const { return _energy; }

private:

    int _energy;

};


class DamageSystem : public QtEntity::PooledEntitySystem<Damage>
{    

public:
    typedef QtEntity::PooledEntitySystem<Damage> BaseClass;
    DamageSystem(QtEntity::EntityManager* em);

    virtual QVariantMap toVariantMap(QtEntity::EntityId eid, int context = QtEntity::EntitySystem::EDIT_ALL) override;
    virtual void fromVariantMap(QtEntity::EntityId eid, const QVariantMap& m, int context = QtEntity::EntitySystem::EDIT_ALL) override;

    void step(int frameNumber, int totalTime, int delta);
};
