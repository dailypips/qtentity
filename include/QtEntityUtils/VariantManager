#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntityUtils/Export>
#include <qtvariantproperty.h>
#include <QtEntity/DataTypes>

namespace QtEntityUtils
{
    class FilePath : public QString
    {
    public:
        FilePath(const QString& v) : QString(v) {}
        FilePath() {}
    };
}

Q_DECLARE_METATYPE(QtEntityUtils::FilePath)

namespace QtEntityUtils
{
    class VariantManager : public QtVariantPropertyManager
    {
        Q_OBJECT
    public:
        VariantManager(QObject *parent = 0)
            : QtVariantPropertyManager(parent)                
        {
            qRegisterMetaType<QtEntityUtils::FilePath>("QtEntityUtils::FilePath");
        }

        virtual QtVariantProperty *addProperty(int propertyType, const QString &name = QString());
        virtual QVariant value(const QtProperty *property) const override;
        virtual int valueType(int propertyType) const override;
        virtual bool isPropertyTypeSupported(int propertyType) const override;

        virtual QStringList attributes(int propertyType) const override;
        virtual int attributeType(int propertyType, const QString &attribute) const override;
        virtual QVariant attributeValue(const QtProperty *property, const QString &attribute) const override;
        
        static int filePathTypeId();
        static int listId();

    public slots:

        virtual void setValue(QtProperty *property, const QVariant &val);
        virtual void setAttribute(QtProperty *property,
                    const QString &attribute, const QVariant &value);

    protected:

        virtual QString valueText(const QtProperty *property) const;
        virtual void initializeProperty(QtProperty *property);
        virtual void uninitializeProperty(QtProperty *property);

    private:

        struct FilePathData {
            QtEntityUtils::FilePath value;
            QString filter;
        };

        QMap<const QtProperty *, FilePathData> _filePathValues;
        QMap<const QtProperty *, QVariantList> _prototypesValues;
        QMap<const QtProperty *, QString> _prototypeValues;

    }; 
}
