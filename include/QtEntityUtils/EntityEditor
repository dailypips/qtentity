#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntityUtils/Export>
#include <QWidget>
#include <QtEntity/DataTypes>
#include <QVariantMap>

class QtVariantPropertyManager;
class QtTreePropertyBrowser;
class QtProperty;

namespace QtEntity
{
    class EntityManager;
}

namespace QtEntityUtils
{
    class QTENTITYUTILS_EXPORT EntityEditor : public QWidget
    {
    Q_OBJECT
    public:
        EntityEditor();

        static void fetchEntityData(const QtEntity::EntityManager& em, QtEntity::EntityId, QVariantMap& components, QVariantMap& attributes);
        static void applyEntityData(QtEntity::EntityManager& em, QtEntity::EntityId eid, const QVariantMap& values);

    public slots:

        void displayEntity(QtEntity::EntityId id, const QVariantMap& data, const QVariantMap& attributes);
        void clear();

    protected slots:

        void propertyValueChanged(QtProperty *property, const QVariant &val);

    signals:

        void entityDataChanged(QtEntity::EntityId id, const QVariantMap& values);

    private:

        QtProperty* addWidgetsRecursively(const QString& name, const QVariant& data, const QVariantMap& schema);
        QtEntity::EntityId _entityId;
        QtVariantPropertyManager* _propertyManager;
        QtTreePropertyBrowser* _editor;
        bool _ignorePropertyChanges;

    };
}
