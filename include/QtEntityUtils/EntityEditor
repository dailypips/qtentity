#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntityUtils/Export>

#include <QtEntity/DataTypes>
#include <QAction>
#include <QVariantMap>
#include <QWidget>

class QtVariantPropertyManager;
class QtTreePropertyBrowser;
class QtProperty;
class QtVariantProperty;

namespace QtEntity
{
    class EntityManager;
}

namespace QtEntityUtils
{
    class QTENTITYUTILS_EXPORT EntityEditor : public QWidget
    {

    Q_OBJECT

    public:
        EntityEditor();

        /**
         * Fetch all components of given entity, get their VariantMap representation
         * and store these by component name into the provided components map.
         * Also fetch the editing attributes of their entity systems and store
         * them by component name into the provided attributes map.
         * @param em entity manager
         * @param id entity id of entity to fetch
         * @param components Store component VariantMaps to this map
         * @param attributes Store component editing attributes to this map
         * @param availableComponents will get filled with the names of all available components
         *        excluding the ones already assigned to the entity
         */
        static void fetchEntityData(const QtEntity::EntityManager& em,
                                    QtEntity::EntityId id,
                                    QVariantMap& components,
                                    QVariantMap& attributes,
                                    QStringList& availableComponents);

        /**
         * Applies component variant maps to components of entity with given id
         * @param em entity manager
         * @param eid apply values to components of this entity
         * @param values A map in format component name => component values
         */
        static void applyEntityData(QtEntity::EntityManager& em,
                                    QtEntity::EntityId eid,
                                    const QVariantMap& values);

    public slots:

        /**
         * Display entity and its components in editor.
         * @param id Entity id of displayed entity
         * @param data A map in format component name => component values
         * @param attributes Editing attributes influencing the way component
         *                   values are handled in editor.
         *                   Format is component name => component attributes, where
         *                   component attributes is a map property name => property attributes,
         *                   where property attributes are Qt Property Browser attributes.
         *                   Example: { "MyComponent", { "MyProperty", {"SingleStep", 0.5 } } }
         */
        void displayEntity(QtEntity::EntityId id,
                           const QVariantMap& data,
                           const QVariantMap& attributes,
                           const QStringList& availableComponents);

        /**
         * Remove currently shown component data
         */
        void clear();

    protected slots:

        // Emits entityDataChanged when property value was changed
        void propertyValueChanged(QtProperty *property);

        // Context menu was requested by right-click on property
        void showContextMenu(const QPoint& p);

        // Add a new entry to QVariantList property from prototype
        void addListItem(const QString& prototype, QtVariantProperty* prop);

        // Remove entry from QVariantList
        void removeListItem(QtVariantProperty* prop);

    signals:

        // emitted when user changed a property
        void entityDataChanged(QtEntity::EntityId id, const QVariantMap& values);

    private:

        QtVariantProperty* addWidgetsRecursively(const QString& name, const QVariant& data, const QVariantMap& schema);
        QtEntity::EntityId _entityId;
        QtVariantPropertyManager* _variantManager;
        QtTreePropertyBrowser* _editor;
        bool _ignorePropertyChanges;
    };
}
