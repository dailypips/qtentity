#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntity/Export>
#include <QtEntity/EntitySystem>
#include <unordered_map>

namespace QtEntity
{

    /**
     * A basic implementation of an EntitySystem.
     * Components are created with new() and stored in a HashMap.
     */
    template <typename T>
    class SimpleEntitySystem : public EntitySystem
    {
        
    public:
        // data type of storage
        typedef std::unordered_map<EntityId, T*> ComponentStore;
        typedef typename ComponentStore::iterator iterator;
        /**
         * @brief EntitySystem constructor.
         * @param componentMeta the QMetaObject of the Component subclass that
         *                      this entity system uses as components
         */
        SimpleEntitySystem(EntityManager* em) 
            : EntitySystem(T::classTypeId(), em)
        {
        }

        virtual ~SimpleEntitySystem()
	    {
            for(auto i = _components.begin(); i != _components.end(); ++i)
            {
                delete i->second;
            }
            _components.clear();
        }


        /**
         * @brief component Return component associated with passed id
         * @param id EntityId of component to fetch
         * @return component or nullptr if it does not exist
         */
        virtual Component* component(EntityId id) const override
        {
            auto i = _components.find(id);
            return (i == _components.end()) ? nullptr : i->second;
        }

        bool component(EntityId id, T*& component) const
        {
            Component* obj = this->component(id);
            component = static_cast<T*>(obj);
            return (component != NULL);
        }

        /**
         * @brief createComponent Construct a component from meta type.
         *
         * If you override this method then please make sure that you emit componentCreated() when
         * a component was created
         *
         * @param id Entity id to associate it with
         * @param properties A map of property values to apply to component before adding it to system
         *                   Format is: { name of QMetaProperty => value to set }
         * @return newly constructed component
         */
        virtual Component* createComponent(EntityId id, const QVariantMap& properties = QVariantMap()) override
        {
            // check if component already exists
            if(component(id) != nullptr)
            {
                qCritical() << "Component already exists!";
                return nullptr;
            }

            // use QMetaObject to construct new instance
            T* component = new T();
            // out of memory?
            if(component == nullptr)
            {
                qCritical() << "Could not construct component. Have you registered the component type?";
                return nullptr;
            }

            // store
            _components[id] = component;
            applyPropertyValues(this, id, properties);
            return component;       
        }

        /**
         * @brief destroyComponent remove component from system and destruct it
         * If you override this method then please make sure that you emit componentAboutToDestruct() before
         * a component is destroyed
         *
         * @param id Entity id of component to destruc
         * @return true if component existed, else false
         */
        virtual bool destroyComponent(EntityId id) override
        {        
            auto i = _components.find(id);
            if(i == _components.end()) return false;
            delete i->second;
            _components.erase(i);
            return true;
        }

        /**
         * @return type id of component class
         */
        virtual ClassTypeId componentType() const { return T::classTypeId(); }

        /**
         * Return begin iterator of component container
         */
        typename ComponentStore::iterator begin() { return _components.begin(); }

        /**
         * Return end iterator of component container
         */
        typename ComponentStore::iterator end() { return _components.end(); }

        /**
         * Delete component and return iterator pointing to next component
         */
        typename ComponentStore::iterator erase(typename ComponentStore::iterator& i)
        {
            typename ComponentStore::iterator next = i; ++next;
            destroyComponent(i->first);
            return next;
        }

        /**
         * Return begin iterator of component container
         */
        typename ComponentStore::const_iterator begin() const { return _components.begin(); }

        /**
         * Return end iterator of component container
         */
        typename ComponentStore::const_iterator end() const { return _components.end(); }

       
        virtual PIterator pbegin() override
        {
            return PIterator(new VIteratorImpl<typename ComponentStore::iterator>(begin()));
        }

        virtual PIterator pend() override
        {
            return PIterator(new VIteratorImpl<typename ComponentStore::iterator>(end()));
        }

        virtual void clear()
        {
            _components.clear();
        }

        /**
         * Return number of components
         */
        virtual size_t count() const override
        {
            return _components.size();
        }

    protected:
       
        /**
         * The entity manager that this entity system is assigned to.
         * Is NULL if entity system was never added
         */
        EntityManager* _entityManager;

        ComponentStore _components;
    };
    
}
