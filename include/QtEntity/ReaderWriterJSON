#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntity/DataTypes>
#include <QtEntity/Export>
#include <QJsonObject>
#include <QVariant>

namespace QtEntity
{
    class EntityManager;
    class EntitySystem;

    class QTENTITY_EXPORT ReaderWriterJSON
    {
    public:

        /**
         * @brief componentToJson converts properties of a component to a Json object.
         * Adds an entry 'classname' with name of entity system.
         * @return
         */
        static QJsonObject componentToJson(const EntitySystem& es, QtEntity::EntityId);

        /**
         * @brief variantToJson converts a single variant to Json.
         * This handles QColor, QVector[2|3|4]D.
         * Special case: Variants of type QVariantList.
         * These are converted to arrays of objects.
         * @return the converted Json object
         */
        static QJsonValue variantToJson(const QVariant&);

        /**
         * Create a component from 'classname' value in passed Json object.
         * Sets values of the component to values of passed json object.
         * @param em Entity manager that contains entity system handling classname
         * @param id Entity to which component should be added
         * @param json Json object containing values for componennt
         * @return true if success
         */
        static bool jsonToComponent(EntityManager& em, EntityId id, const QJsonObject& json);

        /**
         * jsonToComponent tries to convert json value to a variant of given type.
         * @param usertype Variant type to convert to
         * @param val Convert this json value
         * @return variant with type vtype
         */
        static QVariant jsonToVariant(int usertype, const QJsonValue& val);
    };

}
