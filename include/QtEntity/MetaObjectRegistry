#pragma once

#include <QtEntity/Export>
#include <QMetaObject>
#include <functional>

namespace QtEntity
{    
    /**
      * A central point for registering QMetaObjects for constructing QObjects.
      * This is used for adding QObjects to QProperty PropertyObject vectors
      **/
    QTENTITY_EXPORT void registerMetaObject(const QMetaObject& mo);

    /**
      * fetch QMetaObject with a given classname that was previously registered with
      * registerMetaObject
      */
    QTENTITY_EXPORT const QMetaObject* metaObjectByClassName(const QString& classname);    

    class Component;
    typedef std::function<Component*()> ComponentConstructor;
    
    typedef qint32 ClassTypeId;
    namespace ComponentRegistry
    {
        QTENTITY_EXPORT ClassTypeId registerComponent(const QString& classname, const ComponentConstructor& cstr);
        QTENTITY_EXPORT Component* createComponent(ClassTypeId typeId);
        QTENTITY_EXPORT ClassTypeId classTypeId(const QString& classname);
        QTENTITY_EXPORT QString className(ClassTypeId typeId);
    }
}
