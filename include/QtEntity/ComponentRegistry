#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntity/Export>
#include <QtEntity/DataTypes>

/*
 * This file contains a singleton that assigns type ids for component types.
 * Also contains macros for registering component classes with that singleton.
 */

namespace QtEntity
{
    /**
     * Empty macro to use when no exporter macro is needed
     */
#define NOEXP

    /**
     * Macro to use in class declaration of QtEntity::Component subclasses.
     * Adds two methods, a static one returning the static class type id
     * and a dynamic, virtual type id method returning the polymorphic id.
     *
     * Parameter EXMACRO can be used to pass name of export macro for windows DLLs.
     * Use NOEXP as parameter if methods don't need to be exported or the whole
     * class is exported.
     */
#define DECLARE_COMPONENT_TYPE(EXPMACRO)\
    public:\
        EXPMACRO static QtEntity::ClassTypeId classTypeId();\
        EXPMACRO virtual QtEntity::ClassTypeId typeId() const override;\
    private:\
        static QtEntity::ClassTypeId _typeId;

    /**
     * Macro for implementing the component types of a component.
     * Call this in the cpp of the component.
     * Use parameter TYPE to pass in class name of the component
     */
#define IMPLEMENT_COMPONENT_TYPE(TYPE)\
    QtEntity::ClassTypeId TYPE::_typeId = QtEntity::ComponentRegistry::registerComponent(#TYPE);\
    QtEntity::ClassTypeId TYPE::classTypeId(void) { return TYPE::_typeId; }\
    QtEntity::ClassTypeId TYPE::typeId(void) const { return _typeId; }



    namespace ComponentRegistry
    {
        /**
          * Create and return a unique ClassTypeId integer for classname
          */
        QTENTITY_EXPORT ClassTypeId registerComponent(const QString& classname);

        /**
          * Return the unique ClassTypeId integer previously created by registerComponent
          */
        QTENTITY_EXPORT ClassTypeId classTypeId(const QString& classname);

        /**
          * Return class name that is assigned to the class type id
          */
        QTENTITY_EXPORT QString className(ClassTypeId typeId);
    }

}
