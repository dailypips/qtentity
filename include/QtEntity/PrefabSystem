#pragma once

#include <QtEntity/Export>
#include <QtEntity/SimpleEntitySystem>
#include <QVariantMap>
#include <QStringList>

namespace QtEntity
{    

    class Prefab
    {        
    public:

        Prefab(const QString& path, const QVariantMap& components, const QStringList& parameters);

        const QString& path() const { return _path; }

        void setComponents(const QVariantMap& v) { _components = v; }
        const QVariantMap& components() const { return _components; }

        void setParameters(const QStringList& v) { _parameters = v; }
        const QStringList& parameters() const { return _parameters; }

    private:

        QString _path;
        QVariantMap _components;
        QStringList _parameters;

    };

    class PrefabSystem;

    class QTENTITY_EXPORT PrefabInstance : public Component
    {
        friend class PrefabSystem;

        DECLARE_COMPONENT_TYPE(NOEXP)

        Q_OBJECT

    public:

        PrefabInstance();
        ~PrefabInstance();
        const Prefab* prefab() const { return _prefab.data(); }

    private:

        QSharedPointer<Prefab> _prefab;

    };


    class QTENTITY_EXPORT PrefabSystem : public SimpleEntitySystem
    {
        Q_OBJECT

    public:
        PrefabSystem();
        ~PrefabSystem();

        //bool saveEntityAsPrefab(EntityId entity, const QString& path, const QVariantMap& properties) const;

        /**
         * @brief adds a new prefab, identified by full system path
         * @param path Identifies the prefab
         * @param components A map from <component class name> => [<param name> => <param value>]
         * @param parameters A list of parameter names to make editable.
         *                   Parameter names have the form "<component class name>::<param name>"
         */
        void addPrefab(const QString& path, const QVariantMap& components, const QStringList& parameters = QStringList());

        /**
         * @brief update an existing prefab
         *
         * @param path identifies the prefab
         * @param components The new component parameters
         * @param updateInstances if true, iterate through all instances of prefab and update them
         */
        void updatePrefab(const QString& path, const QVariantMap& components, bool updateInstances);

        virtual QObject* createComponent(EntityId id, const QVariantMap& properties = QVariantMap()) override;

    private:

        void createPrefabComponents(EntityId id, Prefab* prefab) const;

        typedef QMap<QString, QSharedPointer<Prefab> > Prefabs;
        Prefabs _prefabs;
    };

}
