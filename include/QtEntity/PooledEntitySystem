#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntity/EntitySystem>
#include <unordered_map>
#include <QDebug>

namespace QtEntity
{

    /**
     * An implementation of the EntitySystem interface.
     * All components are held in a consecutive block of memory.
     * This makes iterating them very fast.
     * Deleting an object works by swapping the last component in the
     * memory block with the deleted component.
     * Danger: Deleting components can invalidate pointers to existing components.
     * This means that pointers to components should not be stored, instead components
     * should always be fetched with EntitySystem::component() directly before use,
     * pointers to components should not be stored somewhere else!!!
     */
    template<typename T>
    class PooledEntitySystem : public EntitySystem
    {
        struct Entry
        {
            Entry(EntityId id) : _id(id) {}
            EntityId _id;
            T _component;
        };

        

    public:
        
        /**
         * Fwd iterator for PooledEntitySystem components
         */
        class iterator : public std::iterator<std::forward_iterator_tag, std::pair<EntityId, T*> > 
        {
        public:
            Entry* _current;
            typedef std::pair<EntityId, T*> ValuePair;
            mutable ValuePair pair;

            iterator(Entry* obj) 
                : _current(obj) 
            {
            }
            iterator& operator=(const iterator& other) { _current = other._current; return *this; }
            bool operator!=(const iterator& other) { return(_current != other._current); }
            ValuePair* operator*() const { pair.first = _current->_id; pair.second = &_current->_component;  return &pair; }
            ValuePair* operator->() const { return operator*(); }
            friend bool operator==(const iterator &lhs, const iterator& rhs) { return (lhs._current == rhs._current); }
            
            iterator& operator++()
            {
                ++_current;
                return *this;
            }

            iterator operator++(int)
            {
                iterator tmp(*this);
                ++(*this);
                return tmp;
            }
            
        };


        /**
         * @brief PooledEntitySystem constructor.
         * @param capacity Allocate place for that many components initially.
         * @param chunkSize When capacity is depleted allocate place for that many additional components
         */
        PooledEntitySystem(EntityManager* em, size_t capacity = 0, size_t chunkSize = 4)
            : EntitySystem(T::classTypeId(), em)
            , _capacity(capacity)
            , _chunkSize(chunkSize)
            , _size(0)            
        {
            Q_ASSERT(chunkSize > 0);
            _components = (capacity == 0) ? nullptr : operator new [](capacity * sizeof(Entry));                
        }

        ~PooledEntitySystem()
        {
            // call all destructors
            for(auto i = begin(); i != end(); ++i)
            {
                i._current->_component.~T();
            }
            operator delete[](_components);
        }

        // Concrete iterator, use these!
        iterator begin() { return(iterator(_size == 0 ? nullptr : static_cast<Entry*>(_components))); }
        iterator end() { Entry* ptr = static_cast<Entry*>(_components); return(iterator(_size == 0 ? nullptr : &ptr[_size])); }
         /**
         * Delete component and return iterator pointing to next component
         */
        iterator erase(const iterator& it)
        {
            auto i = _indices.find(it->first);
            if(i == _indices.end()) return end();
            size_t indexToDestroy = i->second;
            destroyComponent(it->first);
            if(indexToDestroy == _size) return end();
            return iterator(static_cast<Entry*>(_components) + indexToDestroy);
        }


        // Polymorphic iterator, slower!
        virtual PIterator pbegin() { return PIterator(new VIteratorImpl<iterator>(begin())); }
        virtual PIterator pend() { return PIterator(new VIteratorImpl<iterator>(end())); }


        virtual size_t count() const { return _size; }

        virtual ClassTypeId componentType() const { return T::classTypeId(); }

        size_t capacity() const { return _capacity; }

        virtual Component* component(EntityId id) const
        {
            auto i = _indices.find(id);
            if(i == _indices.end()) return nullptr;
            Entry* ptr = static_cast<Entry*>(_components);
            size_t idx = i->second;
            Entry* target = ptr + idx;
            return &target->_component;
        }

        bool component(EntityId id, T*& component) const
        {
            Component* obj = this->component(id);
            component = static_cast<T*>(obj);
            return (component != NULL);
        }

        virtual Component* createComponent(EntityId id, const QVariantMap& properties = QVariantMap())
        {
            if(component(id) != nullptr)
            {
                qCritical() << "Component already exists!";
                return nullptr;
            }
            if(_size == _capacity) reserve(_chunkSize);
            size_t index = _size++;
            _indices[id] = index;
            Entry* ptr = static_cast<Entry*>(_components);
            Entry* obj = &ptr[index];
            new (obj) Entry(id);
            
            if(!properties.empty())
            {
                this->setProperties(id, properties);
            }

            return &obj->_component;
        }


        virtual bool destroyComponent(EntityId id) 
        { 
            auto i = _indices.find(id);
            if(i == _indices.end()) return false;
            size_t indexToDestroy = i->second;
            
            // call destructor
            Entry* ptr = static_cast<Entry*>(_components);
            Entry* toDestroy = ptr + indexToDestroy;
            Q_ASSERT(toDestroy->_id == id);
            toDestroy->_component.~T();
            _indices.erase(id);

            // copy last entry in _components over entry to be destroyed. 
            // Don't do this if entry to be destroyed is last entry.
            if(indexToDestroy != _size - 1)
            {              
                // find index of last entry in components array.
                // Does a linear search!
                QtEntity::EntityId last = 0;
                size_t lastindex;
                
                for(auto j = _indices.begin(); j != _indices.end(); ++j)
                {
                    if(j->second == _size - 1)
                    {
                        last = j->first;
                        lastindex = j->second;                        
                        break;
                    }
                }
                Q_ASSERT(last != 0);
                // copy last entry in _components over entry to destroy                
                memcpy(toDestroy, &ptr[lastindex], sizeof(Entry));                
                _indices[last] = indexToDestroy;                
            }
            --_size;
            return true; 
        }


        virtual void clear()
        {
            // call all destructors
            for(auto i = begin(); i != end(); ++i)
            {
                i._current->_component.~T();
            }
            operator delete[](_components);
            _components = nullptr;   
            _size = 0;
            _capacity = 0;
            _indices.clear();
        }

    protected:

        void reserve(size_t chunk)
        {
            void* components = operator new []( (_capacity + chunk) * sizeof(Entry) );
            if(components == nullptr)
            {
                qCritical() << "Out of memory, can't increase pool size!";
                return;
            }

            if(_capacity != 0)
            {
                memcpy(components, _components, _capacity * sizeof(Entry));
                operator delete[](_components);
            }            
            _components = components;
            _capacity += chunk;
        }

        size_t _capacity;
        size_t _chunkSize;
        size_t _size;

        void* _components;
        std::unordered_map<QtEntity::EntityId,size_t> _indices;

    };
}
