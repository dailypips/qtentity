#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntity/Export>
#include <QtEntity/DataTypes>
#include <QtEntity/PropertyAccessor>
#include <QVariantMap>
#include <QDebug>

namespace QtEntity
{

    /**
     * Global methods assigning class type ids
     */
    namespace ComponentRegistry
    {
        QTENTITY_EXPORT ClassTypeId registerComponent(const QString& classname);
        QTENTITY_EXPORT ClassTypeId classTypeId(const QString& classname);
        QTENTITY_EXPORT QString className(ClassTypeId typeId);
    }


    /**
     * Base class for all QtEntity components.
     * Simply holds a type id for identifying the type of the component.
     */
    class Component
    {
    public:
        virtual ~Component() {}

        /**
         * Returns type ID of component class. These are usually assigned by ComponentRegistry::registerComponent().
         */
        virtual QtEntity::ClassTypeId typeId() const = 0;
    };



    /**
     * Abstract iterator interface for implementing forward iterators.
     * Used in EntitySystem::Iterator for wrapping other iterators in a polymorphic interface.
     */
    class VIterator
    {
    public:
        virtual ~VIterator() {}
        virtual VIterator* clone() = 0;            
        virtual Component* object() = 0;
        virtual bool equal(VIterator* other) = 0;
        virtual void increment() = 0;
    };


     /**
        * Convenience template for implementing VIterator interface with a concrete Iterator class.
        * U is the type of the concrete iterator.
        */
    template <typename U>
    class VIteratorImpl : public VIterator
    {
        U _iter;
    public:
        VIteratorImpl(const U& it) :_iter(it) {}
        virtual VIterator* clone() { return new VIteratorImpl<U>(_iter); }
        virtual EntityId id() { return _iter->first; }
        virtual Component* object() { return _iter->second; }
        virtual bool equal(VIterator* other) { return _iter == static_cast<VIteratorImpl<U>*>(other)->_iter; }
        virtual void increment() { ++_iter; }
    };

    /**
        * @brief The Iterator class for iterating through all components of an EntitySystem.
        * Uses a VIterator heap object for accessing the concrete underlying iterator.
        */
    class PIterator : public std::iterator<std::forward_iterator_tag, Component*> 
    {
    public:
        PIterator(VIterator* vit) : _viter(vit) {}
        PIterator(const PIterator& other) : _viter(other._viter->clone()) {}
        ~PIterator() { delete _viter; }
        PIterator operator=(const PIterator& other) { delete _viter; _viter = other._viter->clone(); return *this;  }
        bool operator!=(const PIterator& other) { return !(_viter->equal(other._viter)); }
        Component* operator*() { return _viter->object(); }
        Component* operator->() { return _viter->object(); }
        friend bool operator==(const PIterator &lhs, const PIterator& rhs) { return lhs._viter->equal(rhs._viter); }
        PIterator& operator++()
        {
            _viter->increment();
            return *this;
        }

        PIterator operator++(int)
        {
            PIterator tmp(*this);
            ++(*this);
            return tmp;
        }
            
    private:
            
        VIterator* _viter;
            
    };


    // fwd declaration
    class EntityManager;

    /**
     * Entity system base class.
     * Entity systems are responsible for storing and managing components.
     * Each entity system instance holds components of a specific type.
     */
    class QTENTITY_EXPORT EntitySystem : public QObject
    {
        Q_OBJECT

        QVector<PropertyAccessor> _properties;
        EntityManager* _entityManager;

    public:

        /**
         * CTor.
         *@param cid Class type id uniquely identifying this entity system.
         *           The id is usually created by ComponentRegistry::registerComponent.
         *@param em Entity manager that should hold this system. Class instance is
         *          added to the entity manager. Entity manager takes ownership.
         */
        QTENTITY_EXPORT EntitySystem(ClassTypeId cid, EntityManager* em);

        /**
         * DTor. Deletes all components.
         */
        QTENTITY_EXPORT virtual ~EntitySystem();
        
        /**
         * Fetch entity manager this system is assigned to
         */
        inline EntityManager* entityManager() const { return _entityManager; }

        /**
         * @brief component Return component associated with passed id
         * @param id EntityId of component to fetch
         * @return component or nullptr if it does not exist
         */
        virtual Component* component(EntityId id) const = 0;

        /**
         * @brief createComponent Construct a component from meta type.
         * @throw runtime_exception
         *
         * @param id Entity id to associate it with
         * @param properties A map of property values to apply to component before adding it to system
         *                   Format is: { name of QMetaProperty => value to set }
         * @return newly constructed component
         */
        virtual Component* createComponent(EntityId id, const QVariantMap& properties = QVariantMap()) = 0;

        /**
         * @brief destroyComponent remove component from system and destruct it
         *
         * @param id Entity id of component to destruct
         * @return true if component existed, else false
         */
        virtual bool destroyComponent(EntityId id) = 0;

        /**
         * @return type of component class
         */
        virtual ClassTypeId componentType() const = 0;

        /**
         * Return class name of component type stored in this entity system
         */
        QString componentName() const;

        /**
         * @return number of components
         */
        virtual size_t count() const = 0;

        /**
         * Clear all components
         */
        virtual void clear() = 0;

        /**
         * Return number of properties
         */
        int propertyCount() const;

        /**
         * Return a property accessor by index
         */
        PropertyAccessor property(int idx);

        /**
         * Return a const proeprty accessor by index
         */
        const PropertyAccessor property(int idx) const;
          

        /**
         * pend() and pbegin() implementations have to return EntitySystem::Iterator instances.
         * These are polymorphic iterators which can be used to iterate over all components
         * without having to know the component type.
         * Using these is slower than using the type specific begin() and end() iterators
         * and should only be used if specific type information is not present.
         * Example implementation:
         *    return EntitySystem::Iterator(new VIteratorImpl<std::vector<MyComponent>::Iterator>(begin()));
         * where std::vector<MyComponent> is the type of the container holding the components.
        */
        virtual PIterator pbegin() = 0;
        virtual PIterator pend() = 0;
    
    protected:

        /**
         * Add a property accessor to system
         */
        void addProperty(const PropertyAccessor& a);

        
    };

    /**
     * Helper function for fetching a map containing property names => values
     * from an entity system for a specific component
     * @param es Entity system to fetch from
     * @param eid ID of component entity to fetch from
     * @return A map from property names to QVariant values
     */
    inline QVariantMap propertyValues(EntitySystem* es, EntityId eid)
    {
        QVariantMap m;
        for(int i = 0; i < es->propertyCount(); ++i)
        {
            auto prop = es->property(i);
            m[prop.name()] = prop.read(eid);
        }
        return m;
    }

    /**
     * Helper function to fetch all property attributes for an entity system.
     * @param es Entity system to fetch from
     * @return A map from property names to property attributes map
     */
    inline QVariantMap propertyAttributes(EntitySystem* es)
    {
        QVariantMap m;
        for(int i = 0; i < es->propertyCount(); ++i)
        {
            auto prop = es->property(i);
            if(!prop.attributes().empty())
            {
                m[prop.name()] = prop.attributes();
            }
        }
        return m;
    }

    /**
     * Helper function to assign multiple property values to a specified component
     * in the given system
     * @param es Entity system holding component
     * @param eid ID identifying component
     * @param m A map from property name => value
     */
    inline void applyPropertyValues(EntitySystem* es, EntityId eid, const QVariantMap& m)
    {
        for(int i = 0; i < es->propertyCount(); ++i)
        {
            auto prop = es->property(i);
            if(m.contains(prop.name())) 
            {
                bool success = prop.write(eid, m[prop.name()]);
                if(!success)
                {
                    qWarning() << "Could not set property. Name is: " << prop.name();
                }
            }
        }
    }
}
