#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QtEntity/Export>
#include <QtEntity/ComponentIterator>
#include <QtEntity/ComponentRegistry>
#include <QtEntity/DataTypes>
#include <QVariantMap>
#include <QDebug>
#include <QUrl>

namespace QtEntity
{
 
     // fwd declaration
    class EntityManager;

    /**
     * Base class for all QtEntity components.
     * Simply holds a type id for identifying the type of the component.
     */
    class Component
    {
    public:
        virtual ~Component() {}

        /**
         * Returns type ID of component class. These are usually assigned by ComponentRegistry::registerComponent().
         */
        virtual QtEntity::ClassTypeId typeId() const = 0;
    };


    /**
     * Entity system base class.
     * Entity systems are responsible for storing and managing components.
     * Each entity system instance holds components of a specific type.
     */
    class QTENTITY_EXPORT EntitySystem : public QObject
    {
        Q_OBJECT

        EntityManager* _entityManager;

    public:

        /**
         * CTor.
         *@param cid Class type id uniquely identifying this entity system.
         *           The id is usually created by ComponentRegistry::registerComponent.
         *@param em Entity manager that should hold this system. Class instance is
         *          added to the entity manager. Entity manager takes ownership.
         */
        QTENTITY_EXPORT EntitySystem(ClassTypeId cid, EntityManager* em);

        /**
         * DTor. Deletes all components.
         */
        QTENTITY_EXPORT virtual ~EntitySystem();
        
        /**
         * Fetch entity manager this system is assigned to
         */
        inline EntityManager* entityManager() const { return _entityManager; }

        /**
         * @brief component Return component associated with passed id
         * @param id EntityId of component to fetch
         * @return component or nullptr if it does not exist
         */
        virtual Component* component(EntityId id) const = 0;

        /**
         * @brief createComponent Construct a component from meta type.
         * @throw runtime_exception
         *
         * @param id Entity id to associate it with
         * @param properties A map of property values to apply to component before adding it to system
         *                   Format is: { name of QMetaProperty => value to set }
         * @return newly constructed component
         */
        virtual Component* createComponent(EntityId id, const QVariantMap& properties = QVariantMap()) = 0;

        /**
         * @brief destroyComponent remove component from system and destruct it
         *
         * @param id Entity id of component to destruct
         * @return true if component existed, else false
         */
        virtual bool destroyComponent(EntityId id) = 0;

        /**
         * @return type of component class
         */
        virtual ClassTypeId componentType() const = 0;

        /**
         * Return class name of component type stored in this entity system
         */
        QString componentName() const;

        /**
         * @return number of components
         */
        virtual size_t count() const = 0;

        /**
         * Clear all components
         */
        virtual void clear() = 0;
  
        /**
         * Fetch a map containing property names => values for a specific component
         * @param eid ID of component entity to fetch from
         * @return A map from property names to QVariant values
         */
        Q_INVOKABLE virtual QVariantMap properties(QtEntity::EntityId eid) { return QVariantMap(); }

        /**
         * Fetch all property attributes for an entity system.
         * @return A map from property names to property attributes map
         */
        Q_INVOKABLE virtual QVariantMap propertyAttributes() const { return QVariantMap(); }

        Q_INVOKABLE virtual QUrl jsonSchemaUrl() const { return QUrl(); }

        /**
         * Assign multiple property values to a specified component
         * @param eid ID identifying component
         * @param m A map from property name => value
         */
        Q_INVOKABLE virtual void setProperties(QtEntity::EntityId eid, const QVariantMap& m) {}

        /**
         * pend() and pbegin() implementations have to return EntitySystem::Iterator instances.
         * These are polymorphic iterators which can be used to iterate over all components
         * without having to know the component type.
         * Using these is slower than using the type specific begin() and end() iterators
         * and should only be used if specific type information is not present.
         * Example implementation:
         *    return EntitySystem::Iterator(new VIteratorImpl<std::vector<MyComponent>::Iterator>(begin()));
         * where std::vector<MyComponent> is the type of the container holding the components.
        */
        virtual PIterator pbegin() = 0;
        virtual PIterator pend() = 0;
    
    };

    
}
