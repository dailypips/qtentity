#pragma once

#include <QtEntity/DataTypes>
#include <QObject>
#include <QVariantMap>

namespace QtEntity
{
    // fwd declaration
    class EntityManager;

    class EntitySystem : public QObject
    {
    public:

        virtual ~EntitySystem() {}

        /**
         * This is called by entity manager when system is added to entity manager
         */
        virtual void setEntityManager(EntityManager* em) = 0;

        /**
         * @brief getComponent Return component associated with passed id
         * @param id EntityId of component to fetch
         * @return component or nullptr if it does not exist
         */
        virtual QObject* getComponent(EntityId id) const = 0;

        /**
         * @brief createComponent Construct a component from meta type.
         * @throw runtime_exception
         *
         * @param id Entity id to associate it with
         * @param properties A map of property values to apply to component before adding it to system
         *                   Format is: { name of QMetaProperty => value to set }
         * @return newly constructed component
         */
        virtual QObject* createComponent(EntityId id, const QVariantMap& properties = QVariantMap()) = 0;

        /**
         * @brief destroyComponent remove component from system and destruct it
         *
         * @param id Entity id of component to destruct
         * @return true if component existed, else false
         */
        virtual bool destroyComponent(EntityId id) = 0;

        /**
         * @return  meta object type of component class
         */
        virtual const QMetaObject& componentMetaObject() const = 0;

        /**
         * @brief Returns all additional attributes for a property.
         * This can be overwritten by entity system implementations to return
         * a map of QVariants. This is especially used for specifying constraints
         * for the QtPropertyBrowser, but can be used for other means.
         * @param name Name of the property
         * @return a map of QVariants
         */
        virtual const QVariantMap attributesForProperty(const QString& name) const = 0;

        /**
         * Return number of components
         */
        virtual size_t numComponents() const = 0;

        /**
         * Return component at given index
         */
        virtual QObject* componentByIndex(size_t at) = 0;
    };

}
