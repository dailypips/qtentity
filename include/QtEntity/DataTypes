#pragma once

#include <cstdint>
#include <QObject>
#include <QSharedPointer>
#include <QVector>

namespace QtEntity
{
    /**
     * @brief EntityId identifies an entity.
     * Each entity is identified by a unique EntityId. The id is assigned
     * at runtime and is completely arbitrary. All components are indexed by
     * this entity id.
     * EntityIds should be created by EntityManager::createEntityId.
     */
    typedef uint32_t EntityId;

    /**
     * @brief PropertyObjectPointer Pointer to a QObject. See below for
     *        explanation
     */
    typedef QSharedPointer<QObject> PropertyObjectPointer;

    /**
     * @brief PropertyObjects A vector of QObjects.
     * A QProperty can hold a PropertyObjects vector where each entry points
     * to a QObject. These QObjects can be serialized to JSON or
     * manipulated with the Property Editor.
     */
    typedef QVector<PropertyObjectPointer> PropertyObjects;


}

// have to do this in global namespace
Q_DECLARE_METATYPE(QtEntity::EntityId)
Q_DECLARE_METATYPE(QtEntity::PropertyObjects)


namespace QtEntity
{
    /**
     * @brief This has to be called once in an application to make data types
     * available for signal/slot connections
     */
    inline void registerMetaTypes()
    {
        qRegisterMetaType<QtEntity::EntityId>("QtEntity::EntityId");
        qRegisterMetaType<QtEntity::PropertyObjects>("QtEntity::PropertyObjects");
    }
}
