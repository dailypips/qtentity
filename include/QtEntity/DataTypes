#pragma once

/*
Copyright (c) 2013 Martin Scheffler
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial 
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <QMetaType>
#include <cstdint>

namespace QtEntity
{
    /**
     * @brief EntityId identifies an entity.
     * Each entity is identified by a unique EntityId. The id is assigned
     * at runtime and is completely arbitrary. All components are indexed by
     * this entity id.
     * EntityIds should be created by EntityManager::createEntityId.
     */
    typedef uint32_t EntityId;

    /**
     * Identifier for component classes
     */
    typedef uint32_t ClassTypeId;
}

// have to do this in global namespace
Q_DECLARE_METATYPE(QtEntity::EntityId)

namespace QtEntity
{
    /**
     * @brief This has to be called once in an application to make data types
     * available for signal/slot connections
     */
    inline void registerMetaTypes()
    {
        qRegisterMetaType<QtEntity::EntityId>("QtEntity::EntityId");
    }
}
