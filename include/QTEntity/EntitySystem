#pragma once

#include <QTEntity/Export>
#include <QTEntity/DataTypes>
#include <QObject>
#include <QHash>

namespace qte
{
    class QTENTITY_EXPORT EntitySystem : public QObject
    {

    public:
        typedef QHash<EntityId, QObject*> ComponentStore;

        EntitySystem(const QMetaObject& componentMeta);
        virtual ~EntitySystem();


        virtual QObject* getComponent(EntityId id) const
        {
            ComponentStore::const_iterator i = _components.find(id);
            if(i == _components.end())
            {
                return nullptr;
            }
            return i.value();
        }

        bool hasComponent(EntityId id) const
        {
            return (this->getComponent(id) != nullptr);
        }

        virtual QObject* createComponent(EntityId id)
        {
            if(getComponent(id) != nullptr) return nullptr;
            QObject* obj = _componentMetaObject->newInstance();            
            Q_ASSERT(obj != nullptr && "Could not construct component. Have you declared a default constructor with Q_INVOKABLE?");
            _components[id] = obj;
            return obj;
        }

        virtual bool destroy(EntityId id)
        {
            ComponentStore::iterator i = _components.find(id);
            if(i == _components.end()) return false;
            delete i.value();
            _components.erase(i);
            return true;
        }

        const QMetaObject& componentMetaObject() const;

    private:

        const QMetaObject* _componentMetaObject;
        ComponentStore _components;
    };

}
