#pragma once

#include <QTEntity/Export>
#include <QTEntity/EntitySystem>
#include <QHash>
#include <QString>

namespace qte
{

    class QTENTITY_EXPORT EntityManager
    {
    public:

        typedef QHash<const QMetaObject*,EntitySystem*> EntitySystemStore;

        EntityManager();
		~EntityManager();            

        EntityId createEntity();

        template <typename T>
        bool getEntitySystem(T*& out) const;

        template <typename T>
        bool getComponent(EntityId id, T*& component) const;

        template <typename T>
        bool createComponent(EntityId id, T*& component) const;

        template <typename T>
        bool getOrCreateComponent(EntityId id, T*& component) const;

        void addEntitySystem(EntitySystem* es);
        bool removeEntitySystem(EntitySystem* es);

        EntitySystem* getSystemByComponentType(const QMetaObject& componentMetaObject) const;
        EntitySystem* getSystemBySystemType(const QMetaObject& systemMetaObject) const;

    private:
        EntitySystemStore _systemsByComponentType;
        EntitySystemStore _systemsBySystemType;
        QAtomicInt _entityCounter;
    };


    template <typename T>
    bool EntityManager::getEntitySystem(T*& out) const
    {
        EntitySystem* es = this->getSystemBySystemType(T::staticMetaObject);
        out = qobject_cast<T*>(es);
        return (out != nullptr);
    }

    template <typename T>
    bool EntityManager::getComponent(EntityId id, T*& component) const
    {
        EntitySystem* s = this->getSystemByComponentType(T::staticMetaObject);
        QObject* c;
        if(s == nullptr || nullptr == (c = s->getComponent(id)))
        {
            component = nullptr;
            return false;
        }
        component = qobject_cast<T*>(c);
        return true;
    }

    template <typename T>
    bool EntityManager::createComponent(EntityId id, T*& component) const
    {
        EntitySystem* s = this->getSystemByComponentType(T::staticMetaObject);

        if(s == nullptr || s->hasComponent(id)) return false;

        component = qobject_cast<T*>(s->createComponent(id));
        return component != nullptr;
    }

    template <typename T>
    bool EntityManager::getOrCreateComponent(EntityId id, T*& component) const
    {
        EntitySystem* s = this->getSystemByComponentType(T::staticMetaObject);

        if(s == nullptr) return false;
        component = qobject_cast<T*>(s->getComponent(id));

        if(component != nullptr) return true;

        component = qobject_cast<T*>(s->createComponent(id));
        return (component != nullptr);
    }
}
