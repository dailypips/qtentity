#pragma once

#include <QTEntity/Export>
#include <QTEntity/EntitySystem>
#include <QObject>

namespace qte
{
    class ListEntrySystem;

    class QTENTITY_EXPORT ListEntry : public QObject
    {
        Q_OBJECT
        Q_PROPERTY(QString name READ name WRITE setName USER true)

     public:
        Q_INVOKABLE ListEntry(ListEntrySystem*);

        void setName(const QString& name) { _name = name; }
        QString name() const  { return _name; }

    private:
        QString _name;
        ListEntrySystem* _system;
    };


    class QTENTITY_EXPORT ListEntrySystem : public EntitySystem
    {
        Q_OBJECT

    public:
        ListEntrySystem();

        // override to emit signal for creating entity list entry
        virtual QObject* createComponent(EntityId id, const QVariantMap& propertyVals = QVariantMap()) override;

        // override to call ListEntry constructor passing it pointer to this
        virtual QObject* createObjectInstance() override;

        // override to emit signal for removing entity list entry
        virtual bool destructComponent(EntityId id) override;

    signals:

        void listEntryAdded(EntityId id, QString name);
        void listEntryRemoved(EntityId id, QString name);
        void listEntryChanged(EntityId id, QString name);

    };

}
